// constants
DEFINE MAX_CHAR = 150
DEFINE MAX_SIZE = 30

//Function declarations
FUNCTION void welcome()
FUNCTION boolean openFile(inFile)
FUNCTION integer readData(inFile, character[][MAX_CHAR] country, double[][2] gciNcsiData)
FUNCTION void displayData(character[][MAX_CHAR] country, double[][2] gciNcsiData, integer size)
FUNCTION void doAnalysis(character[][MAX_CHAR] country, double[][2] gciNcsiData , integer size)
FUNCTION calcAverage(double[][2], gciNcsiData, integer count, integer column)
FUNCTION void goodbye()

FUNCTION integer main()
    DECLARE inFile
    DECLARE integer size
    DECLARE character[MAX_SIZE][MAX_CHAR] country
    DECLARE double[MAX_SIZE][2] gciNcsiData
    DECLARE double average

    CALL welcome()
    DISPLAY newline

    IF (NOT openFile(inFile)) THEN
        DISPLAY "Error! File did not open! Program closing!!"
        exit(0)
    END IF

    SET size = CALL readData(inFile, country, gciNcsiData)
    CALL displayData(country, gciNcsiData, size)
    DISPLAY newline

    CALL doAnalysis(country, gciNcsiData, size)
    SET average = CALL calcAverage(gciNcsiData , size, 0)

    DISPLAY "Average GCI: " average
    DISPLAY newline, newline

    CALL goodbye()

    RETURN 0
END main

FUNCTION welcome()
    DISPLAY "Welcome to the GCI and NCSI data analysis program!"
    DISPLAY "This program reads data from a file and displays it."
    DISPLAY "It also calculates the average of the NCSI data."
    DISPLAY "Enjoy!"
END FUNCTION

FUNCTION boolean openFile(inFile)
    open("data2.txt" AS inFile)
    IF (NOT inFile.is_open()) THEN
        RETURN false
    END IF
    RETURN true
END FUNCTION

FUNCTION integer readData(inFile, character[][MAX_CHAR] country, integer[][2] gciNcsiData)
    DECLARE integer size = 0

    WHILE (size < MAX_SIZE AND READ_LINE(INFILE, country[size], ';'))
        READ gci score INTO gciNcsiData[size][0]
        SKIP (5, ;)
        READ ncsi score INTO gciNcsiData[size][1]
        SKIP (100, '\n')
        INCREMENT size
    END WHILE

    RETURN size
END FUNCTION

FUNCTION void displayData(character[][MAX_CHAR] country, double[][2] gciNcsiData,integer size)
    DISPLAY header row with columns "Country", "gci", "ncsi"
    DISPLAY separator line

    FOR integer i = 0 TO size - 1
        DISPLAY country[i] left-aligned
        DISPLAY gciNcsiData[i][0] right-aligned
        DISPLAY gciNcsiData[i][1] right-aligned
        DISPLAY newline
    END FOR

    DISPLAY separator line
END FUNCTION

FUNCTION doAnalysis(character[][MAX_CHAR] country,double[][2] gciNcsiData,integer size)
    DECLARE maxGci = 0, minGci = 0

    FOR i = 0 TO size - 1
        IF gciNcsiData[i][0] > gciNcsiData[maxGci][0] THEN
            maxGci = i
            CONVERT country[maxGci] to uppercase
        END IF
    
        IF gciNcsiData[i][0] < gciNcsiData[minGci][0] THEN
            minGci = i
            CONVERT country[minGci] to lowercase
        END IF
    END FOR

    DISPLAY "Country with the highest GCI: " + country[maxGci] " with GCI: " + gciNcsiData[maxGci][0]
    DISPLAY "Country with the lowest GCI: " + country[minGci] " with GCI: " + gciNcsiData[minGci][0]
END FUNCTION

FUNCTION calcAverage(double[][2] gciNcsiData,integer count,integer column)
    DECLARE sum = 0

    FOR i = 0 TO count - 1
        ADD gciNcsiData[i][column] TO sum
    END FOR

    RETURN sum / count
END FUNCTION

FUNCTION void goodbye()
    DISPLAY "Thank you for using the GCI and NCSI data analysis program!"
    DISPLAY "Goodbye"
END FUNCTION